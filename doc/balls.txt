	*balls.nvim*	Idiomatic neovim plugin manager

================================================================================
INTRODUCTION                                                       *balls-intro*

|balls.nvim| is a plugin manager focused on simplicity and extending neovim's
builtin |packages| feature while providing a convenient API to manage keeping
plugin versions in sync with their remotes. It is recommended that you either
add your plugins as git submodules as part of your dotfiles or `.gitignore` your
`pack/` directory entirely.

This plugin manager is still experimental and not very well tested. Issues are
to be expected and I would appreciate bug reports on GitHub.

================================================================================
INSTALLING PLUGINS                                    *balls-installing-plugins*

To install a plugin with |balls.nvim| you use the |balls.register()| function.

Example: >lua
    -- after/plugin/telescope.lua
    local balls = require("balls")

    balls.register({ url = "https://github.com/nvim-lua/plenary.nvim" })
    balls.register({ url = "https://github.com/nvim-telescope/telescope.nvim" })

    require("telescope").setup({
      -- ...your setup here
    })
<

Plugins can be lazy loaded using `lazy = true`. See |balls-lazy-loading|.
Plugins can run custom functions after each update with the `on_sync` parameter.
See |balls.register()|.

================================================================================
COMMANDS                                                        *balls-commands*

|:BallsList|
    Open a floating window displaying all registered plugins.

|:BallsInstall|
    Ensure all registered plugins are installed.

|:BallsUpdate|
    Ensure all registered plugins are up to date.

|:BallsSync|
    Ensure all registered plugins are installed and up to date.

================================================================================
LAZY LOADING                                                *balls-lazy-loading*

Lazy loading is done by installing plugins into the `opt/` directory of your
|packpath|. This will make it available when running |:packadd|. You can setup
|autocmd|s or other triggers to run `vim.fn.packadd(<plugin>)` to load it.

For example, to only load `nvim-cmp` when entering insert mode for the first
time:
>lua
    require("balls").register({
      url = "https://github.com/hrsh7th/nvim-cmp",
      lazy = true,
    })

    vim.api.nvim_create_autocmd("InsertEnter", {
      group = vim.api.nvim_create_augroup("cmp-on-insert", { clear = true }),
      callback = function()
        vim.fn.packadd("nvim-cmp")

        require("cmp").setup({
          -- ...your setup here
        })
      end,
    })
<

If you find that boilerplate repetitve, you can use the |balls.lazy_load()|
wrapper function. It does the exact thing shown above but with less code on your
side.

================================================================================
API                                                                  *balls-api*

balls.setup({config})                                            *balls.setup()*
    Setup function to configure |balls.nvim|.

    Parameters:
      • {config} (|balls.Config|)

balls.register({plugin})                                      *balls.register()*
    Function to register a plugin.
    This will make sure it's installed when running |:BallsInstall| and updated
    when running |:BallsUpdate|.

    Parameters:
      • {plugin} (|balls.PluginConfig|)

balls.list({plugin})                                              *balls.list()*
    Lua API for |:BallsList|.

balls.install({plugin})                                        *balls.install()*
    Lua API for |:BallsInstall|.

balls.update({plugin})                                          *balls.update()*
    Lua API for |:BallsUpdate|.

balls.sync({plugin})                                              *balls.sync()*
    Lua API for |:BallsSync|.

balls.lazy_load({plugin_name}, {events}, {callback})         *balls.lazy_load()*
    Lazily loads a plugin on specific |events|.

    Parameters:
      • {plugin_name} (string) name of the plugin
      • {events} (string | string[]) event(s) to load the plugin on
      • {callback} (function) function to run once the plugin has loaded

    Usage: >lua
      local balls = require("balls")

      balls.register({
        url = "https://github.com/hrsh7th/nvim-cmp",
        lazy = true,
      })

      balls.lazy_load("nvim-cmp", "InsertEnter", function()
        require("cmp").setup({
          -- ...your setup here
        })
      end)
<

================================================================================
TYPES                                                              *balls-types*

All types are namespaced as `balls.*` so they don't clash with any other types.

*balls.Config* Configuration to be passed to |balls.setup()|
>lua
    ---@class balls.Config
    ---
    ---@field packpath string? Custom path for storing plugins.
    ---@field debug boolean? Emit debug logs.
<
*balls.PluginConfig* Configuration to be passed to |balls.register()|
>lua
    ---@class balls.PluginConfig
    ---
    ---@field name string? Custom name for the plugin.
    ---
    ---@field url string Git URL of the plugin's repository.
    ---@field rev string? Git revision for pinning the plugin's version.
    ---
    ---@field lazy boolean? Whether this plugin should be loaded automatically.
    ---@field on_sync balls.OnSync? Post-update hook.
<
*balls.Plugin* Internal representation of a registered plugin
>lua
    ---@class balls.Plugin
    ---
    ---@field name string Name of the plugin. This will be used as the directory name as well.
    ---
    ---@field url string Git URL of the plugin's repository.
    ---@field rev string Git revision for pinning the plugin's version.
    ---
    ---@field lazy boolean Whether this plugin lives in `opt/`.
    ---@field on_sync balls.OnSync? Post-update hook.
<
*balls.OnSync* Custom hook to run after installing / updating a plugin
>lua
    ---@alias balls.OnSync fun(plugin: balls.Plugin)
<
================================================================================

# vim: filetype=help noexpandtab tabstop=8 textwidth=80 colorcolumn=81
