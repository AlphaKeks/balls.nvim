*balls.nvim*                                 An idiomatic neovim plugin manager.

Author: AlphaKeks <alphakeks@dawn.sh>
License: GPLv3.0

================================================================================
INTRODUCTION                                                             *balls*

|balls.nvim| focuses on a few core principles:

- simplicity: a small, well defined interface, leaving no ambiguity
- practical, rather than fancy: all the essential functionality you would expect
  from a plugin manager is included, without any bloat
- idiomatic: rather than re-implementing a plugin system from scratch,
  |balls.nvim| is a thin layer around neovim's builtin |packages| and `git`.

This means it is much simpler to understand and use than e.g. lazy.nvim, at the
cost of having less features. If you're like me though, you don't need 90% of
features most plugin managers offer; all you really need is something that can
clone some git repositories and keep them up to date. If that's what you're
looking for, |balls.nvim| is perfect for you!

Some useful help pages you can read to better understand how |balls.nvim|
functions:

- |packages|
- 'packpath'
- 'runtimepath'

================================================================================
GUIDE                                                              *balls-guide*

If you are unfamiliar with neovim plugins, let me give you a quick overview.

Plugins are usually distributed as git repositories, often hosted on GitHub.
The structure of a plugin is very similar to that of your own config directory,
except that it's missing an `init.vim` / `init.lua` file. This means that
"installing" a plugin, really just means cloning the repository into a directory
where neovim can find and load it. The directories where neovim will check are
defined by 'packpath'. One of these directories, by default, is the `pack/`
directory in your config directory. These directories contain |packages|, which
are made up of a `start/` and an `opt/` directory. Each of those directories can
contain plugins. An example structure could look like this:

~/.config/nvim/
  └─ pack/
     └─ mypackage/
        ├─ start/
        │  ├─ plugin_1/
        │  └─ plugin_2/
        └─ opt/
           ├─ plugin_3/
           └─ plugin_4/

In this configuration, `plugin_*` are git repositories, each with the same
internal structure as your own config. `plugin_1` and `plugin_2` will be loaded
automatically on startup, because they are in the `start/` directory. `plugin_3`
and `plugin_4` on the other hand are in the `opt/` directory, which means they
are optional plugins; they will not be loaded automatically. You can then load
them whenever you want using the |:packadd| command.

By default, any plugins installed with |balls.nvim| will be kept in
`pack/balls/start/`, but you can customize this behavior using |balls:setup()|.

While `pack/` in your config directory is not the only directory in 'packpath',
I chose it specifically because it allows you to keep plugins as git submodules.
Many people keep all their configuration files (not just neovim!) in a single
git repository, often referred to as "dotfiles". If you do this too (and you
should!), you can add all your neovim plugins as git submodules and version
control them. This means that if a plugin ever breaks on an update, you can just
check the latest known commit and pin the plugin to that version until the issue
is fixed upstream.

With that out of the way, let's install some plugins!

The first step is to register a plugin. This will make it available for
|balls.nvim| to keep track of. As an example, we will install telescope.nvim.

Somewhere in your config, e.g. in `init.lua`, put the following code:
>lua
        local Balls = require("balls")

        Balls:register("https://github.com/nvim-telescope/telescope.nvim")
<
If you execute this code, either by running |:source| or by restarting neovim,
it will be added to a global list of plugins. You can inspect this list by
running `:lua= require("balls").plugin_list`. To actually install the plugin,
you can run |:BallsInstall|. This will go through all registered plugins and
install any missing ones, which in this case is only telescope.nvim.

Many plugins allow you to configure them using a `setup` function. This is just
a convention, but most neovim plugins follow it. Telescope specifically actually
doesn't require you to call it at all, but if you wanted to change some
defaults, you would write the following code:
>lua
        local telescope = require("telescope")

        telescope.setup({
          -- ... your options here
        })
<
Note the `require` call in the first line; if telescope isn't installed, it will
throw an error. The traditional way of avoiding this issue is to use |pcall()|:
>lua
        local ok, telescope = pcall(require, "telescope")

        if not ok then
          return
        end

        telescope.setup({
          -- ... your options here
        })
<
Now, if the module can't be found, we return early.

|balls.nvim| also supports a few options for each plugin you register, such as a
custom name or specific git revision. For example, the catppuccin theme is in a
repository called "nvim", which isn't ideal as we would clone a plugin called
"nvim", instead of "catppuccin". You can work around this using the `name`
option like so:
>lua
        local Balls = require("balls")

        Balls:register("https://github.com/catppuccin/nvim", {
          name = "catppuccin",
        })
<
For detailed information about the `register` function and its options, have a
look at |balls:register()|.

|balls.nvim| will also register itself as a plugin when it loads; to overwrite
the options for it (e.g. to use ssh instead of https for cloning), you can
specify a custom `url` and `spec` in |balls:setup()|.

                                                            *balls-lazy-loading*

The more plugins you install, the worse your startup time will get, because
neovim has to load all your plugins on startup. While I recommend you keep your
total plugin count low, it can still be desirable to improve startup time by not
loading plugins before you actually need them. If your startup time feels fast,
feel free to skip the next section!

I mentioned the `opt/` directory earlier already, and that |balls.nvim| will
install everything into `start/` by default. If you want to lazy-load plugins,
you can go about it two ways:

1. call |balls:setup()| and set `lazy_by_default = true`
2. set `lazy = true` for each plugin you want to lazy-load.

For example, if you wanted to load nvim-cmp only when you enter insert mode for
the first time, you could write the following |autocmd|:
>lua
        local Balls = require("balls")

        Balls:register("https://github.com/hrsh7th/nvim-cmp")

        vim.api.nvim_create_autocmd("InsertEnter", {
          once = true,
          callback = function()
            -- Load the plugin
            vim.cmd.packadd("nvim-cmp")

            -- Usual setup code
            require("cmp").setup({
              -- ...
            })
          end,
        })
<
Because this pattern is so common, the table returned by |balls:register()|
actually has a method called `load_on`, which is a wrapper around |autocmd|s.
>lua
        local Balls = require("balls")
        local cmp = Balls:register("https://github.com/hrsh7th/nvim-cmp")

        cmp:load_on("InsertEnter", {
          callback = function()
            require("cmp").setup({
              -- ...
            })
          end,
        })
<
It takes care of `once = true` and the |:packadd| call for you, and also passes
you the plugin table as an argument into `callback` in case you want to chain
functions:
>lua
        local Balls = require("balls")

        Balls:register("https://github.com/hrsh7th/nvim-cmp", { lazy = true })
          :load_on("InsertEnter", {
            -- `event` is the same table you get in any autocmd callback
            -- `plugin` is the table returned by `Balls:register()`.
            callback = function(event, plugin)
              require("cmp").setup({
                -- ...
              })
            end,
          })
<
It will also only run the callback if the plugin is actually installed, so you
don't have to worry about using |pcall()| inside of `callback`.

================================================================================
COMMANDS                                                        *balls-commands*

*:BallsList*            This command will open a floating window displaying all
                      currently installed plugins, as well as some information
                      about them.

*:BallsInstall*         See |balls:install()|.

*:BallsUpdate*          See |balls:update()|.

*:BallsClean*           See |balls:clean()|.

================================================================================
LUA API                                                          *balls-lua-api*

The following functions are exposed by the `balls` Lua module.

balls:setup({config_override})                                   *balls:setup()*
        This function is used to configure |balls.nvim|.

        Parameters:
          • {config_override} (table) all keys are optional
            • {debug} (boolean) enable debug logs
            • {packpath} (string) path to install plugins into; should be part
              of 'packpath'.
            • {lazy_by_default} (boolean) set `lazy = true` for all plugins,
              unless overwritten explicitly.
            • {auto_install} (boolean) install missing plugins automatically on
              registration
            • {auto_update} (boolean) install missing plugins and update
              existing ones automatically on registration
            • {url} (string) the URL to use to install |balls.nvim|
            • {spec} (|balls.PluginSpec|) extra options for installing
              |balls.nvim|

        Returns:
          • {config} (table)
            • {debug} (boolean) enable debug logs
            • {packpath} (string) path to install plugins into; should be part
              of 'packpath'.
            • {lazy_by_default} (boolean) set `lazy = true` for all plugins,
              unless overwritten explicitly.
            • {auto_install} (boolean) install missing plugins automatically on
              registration
            • {auto_update} (boolean) install missing plugins and update
              existing ones automatically on registration
            • {url} (string) the URL to use to install |balls.nvim|
            • {spec} (|balls.PluginSpec| | nil) extra options for installing
              |balls.nvim|

balls:register({url}, {spec})                                 *balls:register()*
        This function is used for registering plugins. Registered plugins will
        be added to a global list accessible via `require("balls").plugin_list`
        that will be used for all |balls-commands|.

        Parameters:
          • {url} (string) the git URL to pull the plugin from; can be anything
            that is legal after `git pull`
          • {spec} (table | nil) any custom options; all keys are optional
            • {name} (string) a custom name for the local repository
            • {lazy} (boolean) lazy-load this plugin (see |balls-lazy-loading|)
            • {rev} (string) a specific git revision
            • {on_sync} (function) a callback to run whenever the plugin is
              installed or updated; it has the following parameters:
              • {self} (|balls.Plugin|) the plugin object

        Returns:
          • {plugin} (|balls.Plugin|) the registered plugin

balls:plugins()                                                *balls:plugins()*
        This function returns an iterator over the currently registered plugins.
        Example:
>lua
        local Balls = require("balls")

        for plugin in Balls:plugins() do
          -- ...
        end
<
balls:install()                                                *balls:install()*
        This command will install registered plugins that aren't installed yet.

balls:update()                                                  *balls:update()*
        This command will update any currently installed plugins.
        That includes any changes to options like `lazy` or `rev`.

balls:clean()                                                    *balls:clean()*
        This command will remove any plugins that are still installed, but not
        registered anymore.

PluginSpec                                                    *balls.PluginSpec*
        Options for customizing a plugin's installation.
          • {name} (string) a custom name for the local repository
          • {lazy} (boolean) lazy-load this plugin (see |balls-lazy-loading|)
          • {rev} (string) a specific git revision
          • {on_sync} (function) a callback to run whenever the plugin is
            installed or updated; it has the following parameters:
            • {self} (|balls.Plugin|) the plugin object

Plugin                                                            *balls.Plugin*
        A registered plugin.
          • {name} (string) the plugin's name
          • {lazy} (boolean) whether this plugin should be lazy-loaded
            (see |balls-lazy-loading|)
          • {url} (string) the plugin's git URL
          • {rev} (string | nil) a specific git revision to use

The following methods are defined and expected to be used by users:

Plugin:path()                                              *balls.Plugin:path()*
        The installation path of this plugin. This can be useful if a custom
        build step is required, like shelling out to `make` in the plugin's
        directory.

Plugin:installed()                                    *balls.Plugin:installed()*
        Whether this plugin is currently installed.

Plugin:load()                                              *balls.Plugin:load()*
        Loads this plugin, if it isn't already loaded. This is a convenience
        wrapper around |:packadd|.

Plugin:load_on({events}, {options})                     *balls.Plugin:load_on()*
        Setup an |autocmd| that will load this plugin. See |balls-lazy-loading|
        for an example usage.

        Parameters:
          • {events} (string | string[]) event name(s) that should load this
            plugin when fired
          • {options} (|balls.LoadOptions| | nil) options to pass to the created
            |autocmd|

*balls.LoadOptions* - options to pass to |balls.Plugin:load_on()|
  • {callback} (function | nil) callback to run when one of the events is fired;
    it has the following parameters:
    • {event} (table) see |nvim_create_autocmd()|
    • {plugin} (|balls.Plugin|) the plugin that was just loaded
  • {...} see |nvim_create_autocmd()|

================================================================================

vim: filetype=help expandtab tabstop=8 textwidth=80 colorcolumn=81
