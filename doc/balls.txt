*balls.nvim*                                 An idiomatic neovim plugin manager.

Author: AlphaKeks <alphakeks@dawn.sh>
License: GPL version 3.0

================================================================================
INTRODUCTION                                                             *balls*

|balls.nvim| is an idiomatic neovim plugin manager that aims for simplicity and
embracing builtin features as much as possible. It has a very simple API, runs
asynchronously and tries to be predictable instead of clever.

To install a plugin you must first register it using the |balls.register()|
function:
>lua
    require("balls").register({
      url = "https://github.com/nvim-telescope/telescope.nvim",
    })
<
After this code ran, the plugin should appear in |:BallsList|. You can then use
|:BallsInstall| to install all you plugins. To update existing plugins you can
use |:BallsUpdate| or |:BallsSync|, the latter of which will also remove unused
plugins. See |balls-commands| for a full list of available commands.

For lazy loading plugins see |balls-lazy-loading|.

================================================================================
COMMANDS                                                        *balls-commands*

All of these commands are available immediately after |balls.nvim| is loaded.
They internally call Lua functions which are exposed via the `balls` module.
For details about the API see |balls-lua-api|.

*:BallsList*            This command will open a floating window listing all the
                      plugins you have currently registered. Each plugin will
                      also have a little bit of information attached to it, such
                      as its Git URL or whether it is installed.

*:BallsInstall*         This command will go through all registered plugins and
                      make sure they're installed. It does not remove old
                      plugins or update anything.
                      Look at |:BallsUpdate| or |:BallsSync| for that.

*:BallsUpdate*          This command will update any plugins that are both
                      registered and installed.

*:BallsSync*            This command will sync the state of your currently
                      registered plugins with the actual files on your system.
                      This means old plugins that are installed but not
                      registered get removed, missing plugins are installed,
                      plugins that are not pinned to a specific git revision are
                      updated, plugins pinned to a specific git revision will be
                      set to that version.

*:BallsClean*           This command will remove any plugins that are still
                      installed on your system but not registered anymore.

================================================================================
LUA API                                                          *balls-lua-api*

All of these functions are available via the `balls` module like so:
>lua
    local balls = require("balls")

    -- ... do stuff with `balls`
<

balls.setup({override})                                          *balls.setup()*
    This function lets you configure |balls.nvim| with some options.

    Parameters:
      • {override}  (|balls.ConfigOverride|) Additional options.
                   • packpath?: (string) Custom path to install plugins to.
                     Defaults to `stdpath('config')/pack/balls`.
                     See |packpath| for more information.
                   • always_lazy?: (boolean) Default to installing plugins
                     as optional plugins. This is equivalent to passing
                     `lazy = true` to every plugin you register.
                   • debug?: (boolean) Print debug logs.
                   • balls_spec?: (|balls.PluginSpec|) Plugin Spec for
                     |balls.nvim| itself.

balls.register({plugin_spec})                                 *balls.register()*
    This function lets you register a plugin.
    Once a plugin is registered it will be considered by |:BallsInstall| and
    friends.

    Parameters:
      • {plugin_spec}  (|balls.PluginSpec|) Plugin Specification.
                   • url: (string) Git URL to clone the plugin.
                   • rev?: (string) Specific Git revision to checkout.
                   • name?: (string) Custom name for the local repository.
                   • lazy?: (boolean) Do not load this plugin automatically.
                   • on_sync?: (fun(plugin: |balls.Plugin|)) Callback function
                     for when the plugin gets installed or updated.

    Return:
        |balls.Plugin|

balls.list()                                                      *balls.list()*
    This function will open a floating window displaying all currently
    registered plugins.

balls.install()                                                *balls.install()*
    This function will install any registered plugins that aren't yet installed.

balls.sync()                                                      *balls.sync()*
    This function will sync the state of the currently registered plugins with
    what's actually on disk.

balls.clean()                                                    *balls.clean()*
    This function will remove any old plugins that are still installed but not
    registered anymore.

================================================================================
LAZY LOADING                                                *balls-lazy-loading*

Lazy Loading is when a plugin is not loaded automatically on startup, but rather
when a certain trigger fires. This "trigger" is usually an |autocmd|, but it can
be whatever you want. When registering a plugin with `lazy = true` you are
telling |balls.nvim| to put it into the `opt/` directory of your |packpath|. You
can then load it whenever you want using the |:packadd| command.

If you want to use |autocmd|s to load your plugins, |balls.nvim| provides a nice
wrapper function to do exactly that. |balls.register()| returns a |balls.Plugin|
which contains all the properties about that plugin. This includes a helper
function called `load_on`. It's a minimal wrapper around an |autocmd|.
>lua
    local balls = require("balls")
    local cmp = balls.register({
      url = "https://github.com/hrsh7th/nvim-cmp",
      lazy = true,
    })

    cmp:load_on("InsertEnter", {
      callback = function(event, plugin)
        require("cmp").setup({
          -- ...
        })
      end,
    })
<
The first parameter is either a single event or a list of |events|.
The second parameter is a table (|balls.EventOpts|).
The `event` parameter into the `callback` function is the same parameter you
also get when using |nvim_create_autocmd()| yourself. The `plugin` parameter is
the plugin itself in case you didn't store the return value of
|balls.register()| in a variable and just chained the functions together.
>lua
    require("balls")
      .register({ url = "https://github.com/hrsh7th/nvim-cmp", lazy = true })
      :load_on("InsertEnter", {
        callback = function(event, plugin)
          require("cmp").setup({
            -- ...
          })
        end,
      })
<
The `callback` is automatically |vim.schedule_wrap()|'d and a call to |:packadd|
is added to load the plugin before executing the `callback`. It's basically
equivalent to this:
>lua
    vim.api.nvim_create_autocmd(events, {
      callback = vim.schedule_wrap(function(event)
        vim.cmd.packadd(plugin.name)
        callback(event, plugin)
      end),
    })
<

================================================================================
TYPES                                                              *balls-types*

*balls.ConfigOverride*  (table) Options for |balls.setup()|
    • packpath? (string)
    • always_lazy? (boolean)
    • debug? (boolean)
    • balls_spec? (|balls.PluginSpec|)

*balls.Config*  (table) Internal configuration for |balls.nvim|
    • packpath (string)
    • always_lazy (boolean)
    • debug (boolean)
    • balls_spec (|balls.PluginSpec|)

*balls.PluginSpec*  (table) Plugin Specification for |balls.register()|
    • url (string)
    • rev? (string)
    • name? (string)
    • lazy? (boolean)
    • on_sync? (fun(plugin: |balls.Plugin|))

*balls.Plugin*  (table) Internal plugin representation.
    • url (string)
    • rev? (string)
    • name (string)
    • lazy (boolean)
    • on_sync? (fun(self: |balls.Plugin|))
    • path (fun(self: |balls.Plugin|, lazy?: boolean): string)
    • installed (fun(self: |balls.Plugin|): boolean)
    • install (fun(self: |balls.Plugin))
    • update (fun(self: |balls.Plugin))
    • sync (fun(self: |balls.Plugin))
    • checkout (fun(self: |balls.Plugin|, rev?: string))
    • helptags (fun(self: |balls.Plugin|))
    • load_on (fun(
        self: |balls.Plugin|,
        events: string | string[],
        opts?: |balls.EventOpts|
      ))

*balls.EventOpts*  (table) Options to pass to |balls.Plugin|`:load_on()`
    • group? (string | integer)
    • pattern? (string | string[])
    • buffer? (integer)
    • desc? (string)
    • command? (string)
    • once? (boolean)
    • nested? (boolean)
    • callback? (fun(event: |balls.Event|, plugin: |balls.Plugin|))

*balls.Event*  (table) Wrapper type for a neovim event (see |events|).
    • id (integer)
    • event (string)
    • group (integer?)
    • match (string)
    • buf (integer)
    • file (string)
    • data (any)

================================================================================

vim: filetype=help expandtab tabstop=8 textwidth=80 colorcolumn=81
